heat_template_version: 2014-10-16


description: >
  A host used for running openshift-ansible playbooks and other optional services.


parameters:

  key_name:
    description: >
      A pre-submitted SSH key to access the VM hosts
    type: string
    constraints:
    - custom_constraint: nova.keypair

  image:
    description: >
      Select a base image to use for the infrastructure server
    type: string
    constraints:
    - custom_constraint: glance.image

  flavor:
    description: >
      Define the hardware characteristics for the VMs: CPU, Memory, base disk
    type: string
    constraints:
    - custom_constraint: nova.flavor

  hostname:
    description: >
      The Infrastructure hostname portion of the FQDN
    type: string

  domain_name:
    description: >
      All VMs will be placed in this domain
    type: string

  # Software Subscription information
  rhn_username:
    description: >
      A valid user with entitlements to RHEL and OpenShift software repos
    type: string

  rhn_password:
    description: >
      The password for the RHN user
    type: string
    hidden: true

  rhn_pool:
    description: >
      A subscription pool containing the RHEL and OpenShift software repos
      OPTIONAL
    type: string
    hidden: true

  extra_rhn_pools:
    type: comma_delimited_list
    description: List of rhn pools which will be installed on each node.
    default: ''

  ssh_user:
    description: >
      The user for SSH access to the VM hosts
    type: string

  # Network topology and location
  external_network:
    description: >
      The name of the inbound access network
    type: string
    constraints:
    - custom_constraint: neutron.network

  fixed_network:
    description: >
      The name or ID of the internal network
    type: string
    constraints:
    - custom_constraint: neutron.network

  fixed_subnet:
    description: >
      The name or ID of the internal IPv4 space
    type: string
    constraints:
    - custom_constraint: neutron.subnet

  ansible_public_key:
    description: >
      The SSH public key that Ansible will use to access master and node hosts
      This will be placed on each VM host in /root/.ssh/authorized_keys
    type: string

  ansible_private_key:
    description: >
      The private key that Ansible will use to access master and node hosts
      This file will be placed on the infrastructure host and protected
    type: string

  # OpenShift service parameters
  deployment_type:
    description: >
      Select the community or enterprise version of OpenShift
    type: string

  lb_hostname:
    description: >
      The hostname of the load balancer feeding the OpenShift master traffic
    type: string
    default: ''

  ldap_url:
    description: >
      The LDAP url for access to the LDAP service (redundant? ML)
    type: string
    default: ''

  ldap_preferred_username:
    description: >
      What field to use to look up and identify users in the database
    type: string
    default: 'uid'

  ldap_bind_dn:
    description: >
      LDAP service access user identifier
    type: string
    default: ''

  ldap_bind_password:
    description: >
      LDAP service access password
    type: string
    default: ''

  ldap_ca:
    description: >
      The Certificate Authority file to confirm SSL encryption security
    type: string
    default: ''

  ldap_insecure:
    description: >
      Toggle SSL encryption for LDAP communications
    type: string
    default: false

  openshift_sdn:
    description: >
      Enable and select the container communications network: OVS or Flannel
    type: string

  docker_volume_size:
    description: >
      The size of a cinder volume in GB to allocate to docker for
      container/image storage
    type: number
    default: 25

  floating_ip:
    description: >
      TBD: What is this a floating IP for? For the DNS server?
    type: string

  port:
    description: Neutron port (with a floating IP address) to assign to the DNS Nova Server
    type: string

  # Load Balancer
  lb_ip:
    description: >
      The IP address of the load balancer feeding the OpenShift master traffic
    type: string
    default: ''

  # LDAP
  # For external and/or common user information with OpenStack
  ldap_ip:
    description: >
      The IP address of the LDAP server providing OpenShift user information
    type: string
    default: ''

  ldap_hostname:
    description: >
      The hostname of the LDAP server providing OpenShift user information
    type: string
    default: ''

  deploy_registry:
    description: >
      True = Enable automatic provisioning of the Docker registry
    type: boolean

  registry_volume_id:
    description: >
      Volume to use by the Openshift registry
    type: string
    default: ''

  registry_volume_fs:
    description: >
      Filesystem to use for Openshift registry persistent volume
    type: string
    default: ext4

  deploy_router:
    description: >
      True = Enable deployment of the OpenShift router
    type: boolean

  # Delay openshift installation until the master is ready to accept
  timeout:
    description: Time to wait until the master setup is ready.
    type: number
    default: 4000

  # OpenShift installer (ansible) parameters
  skip_ansible:
    description: >
      Disable host based installation/configuration
    type: boolean

  skip_dns:
    type: boolean

  docker_version:
    description: >
      version of the docker packages to install for master and node setup (ex: 1.8.2)
    type: string

  loadbalancer_type:
    type: string

  openshift_ansible_git_url:
    description: >
      The location of the OpenShift Ansible playbooks. A Git respository URL
    type: string

  openshift_ansible_git_rev:
    description: >
      A specific revision of the Ansible playbooks to use for installation
    type: string

  # OpenStack access parameters
  # These allow the OpenShift service to view and use OpenStack resources
  os_auth_url:
    description: >
      The location of the OpenStack Keystone service
    type: string

  os_username:
    description: >
      The OpenStack user that OpenShift will use to access resources
    type: string

  os_password:
    description: >
      The secret part of the OpenStack user credentials
    type: string
    hidden: true

  os_tenant_name:
    description: >
      The name of the OpenStack project or "tenant" for OpenShift to use
    type: string

  os_region_name:
    description: >
      The name of the OpenStack "region" to use to create or find resources
    type: string

  extra_repository_urls:
    type: comma_delimited_list
    description: List of repository URLs which will be installed on each node.
    default: ''

  extra_docker_repository_urls:
    type: comma_delimited_list
    description: List of docker repository URLs which will be installed on each node, if a repo is insecure use '#insecure' suffix.
    default: ''

  dns_forwarders:
    type: comma_delimited_list
    description: address of dns nameservers reachable in your environment

resources:

  # A VM to provide host based orchestration and other sub-services
  host:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: "HOST.DOMAIN"
          params:
            HOST: {get_param: hostname}
            DOMAIN: {get_param: domain_name}
      admin_user: {get_param: ssh_user}
      image: {get_param: image}
      flavor: {get_param: flavor}
      key_name: {get_param: key_name}
      networks:
      - port: {get_param: port}
      user_data_format: SOFTWARE_CONFIG
      user_data: {get_resource: init}

  # Install, configure and enable the Heat configuration agent
  config_agent:
    type: collect-config-setup/install_config_agent_centos_yum.yaml

  # Execute the ansible playbook(s) on the infra server to configure the
  # openshift hosts and services
  run_ansible:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
        - name: node_hostname
        - name: all_master_nodes
        - name: domainname
          default: {get_param: domain_name}
        - name: ssh_user
          default: {get_param: ssh_user}
        - name: deployment_type
          default: {get_param: deployment_type}
        - name: skip_dns
          default: {get_param: skip_dns}
        - name: lb_ip
          default: {get_param: lb_ip}
        - name: lb_hostname
          default: {get_param: lb_hostname}
        - name: ldap_url
          default: {get_param: ldap_url}
        - name: ldap_preferred_username
          default: {get_param: ldap_preferred_username}
        - name: ldap_bind_dn
          default: {get_param: ldap_bind_dn}
        - name: ldap_bind_password
          default: {get_param: ldap_bind_password}
        - name: ldap_ca
          default: {get_param: ldap_ca}
        - name: ldap_insecure
          default: {get_param: ldap_insecure}
        - name: openshift_sdn
          default: {get_param: openshift_sdn}
        - name: deploy_registry
          default: {get_param: deploy_registry}
        - name: registry_volume_id
          default: {get_param: registry_volume_id}
        - name: registry_volume_fs
          default: {get_param: registry_volume_fs}
        - name: deploy_router
          default: {get_param: deploy_router}
        - name: skip_ansible
          default: {get_param: skip_ansible}
        - name: os_auth_url
          default: {get_param: os_auth_url}
        - name: os_username
          default: {get_param: os_username}
        - name: os_password
          default: {get_param: os_password}
        - name: os_tenant_name
          default: {get_param: os_tenant_name}
        - name: os_region_name
          default: {get_param: os_region_name}
        - name: lb_type
          default: {get_param: loadbalancer_type}
        - name: dns_ip
          default: {get_attr: [host, first_address]}
        - name: dns_forwarders
          default:
            list_join:
              - ","
              - {get_param: dns_forwarders}
        - name: infra_instance_id
          default: {get_resource: host}
      outputs:
        - name: ca_cert
        - name: ca_key
      config:
        get_file: fragments/master-ansible.sh

  # Collect the results from a set of resources
  init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: set_hostname}
      - config: {get_resource: included_files}
      - config: {get_resource: rhn_register}
      - config: {get_resource: set_extra_repos}
      - config: {get_resource: set_extra_docker_repos}
      - config: {get_resource: host_update}
      - config: {get_attr: [config_agent, config]}
        type: multipart
      - config: {get_resource: infra_boot}

  # Install the DNS server and retrieve the Ansible playbooks for OpenShift
  infra_boot:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config:
        str_replace:
          params:
            $SKIP_DNS: {get_param: skip_dns}
            $DOCKER_VERSION: {get_param: docker_version}
            $OPENSHIFT_ANSIBLE_GIT_URL: {get_param: openshift_ansible_git_url}
            $OPENSHIFT_ANSIBLE_GIT_REV: {get_param: openshift_ansible_git_rev}
            $WC_NOTIFY: { get_attr: ['wait_handle', 'curl_cli'] }
          template: {get_file: fragments/infra-boot.sh}

  # Compose the FQDN for cloud-init
  set_hostname:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        hostname: {get_param: hostname}
        fqdn:
          str_replace:
            template: "HOST.DOMAIN"
            params:
              HOST: {get_param: hostname}
              DOMAIN: {get_param: domain_name}

  # Place host configuration files via cloud-init
  included_files:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        write_files:
        - path: /usr/local/bin/retry
          permissions: 0755
          content: {get_file: fragments/retry.sh}
        - path: /root/.ssh/id_rsa
          permissions: 0600
          content: {get_param: ansible_private_key}
        - path: /root/.ssh/id_rsa.pub
          permissions: 0600
          content: {get_param: ansible_public_key}
        - path: /var/lib/os-apply-config/templates/var/lib/ansible/templates/etc/resolv.conf
          permissions: 0644
          content: {get_file: templates/var/lib/ansible/templates/etc/resolv.conf}
        - path: /var/lib/os-apply-config/templates/var/lib/ansible/group_vars/masters.yml
          permissions: 0644
          content: {get_file: templates/var/lib/ansible/group_vars/masters.yml}
        - path: /var/lib/os-apply-config/templates/var/lib/ansible/host_vars/loadbalancer.yml
          permissions: 0644
          content: {get_file: templates/var/lib/ansible/host_vars/loadbalancer.yml}
        - path: /var/lib/os-apply-config/templates/var/lib/ansible/group_vars/OSv3.yml
          permissions: 0644
          content: {get_file: templates/var/lib/ansible/group_vars/OSv3.yml}
        - path: /var/lib/os-apply-config/templates/var/lib/ansible/playbooks/registry.yml
          permissions: 0644
          content: {get_file: templates/var/lib/ansible/playbooks/registry.yml}
        - path: /var/lib/os-apply-config/templates/var/lib/ansible/playbooks/dns.yml
          permissions: 0644
          content: {get_file: templates/var/lib/ansible/playbooks/dns.yml}
        - path: /var/lib/os-apply-config/templates/var/lib/ansible/playbooks/main.yml
          permissions: 0644
          content: {get_file: templates/var/lib/ansible/playbooks/main.yml}
        - path: /var/lib/os-apply-config/templates/var/lib/ansible/inventory
          permissions: 0644
          content: {get_file: templates/var/lib/ansible/inventory}
        ssh_authorized_keys:
        - {get_param: ansible_public_key}


  # Register the host with RHN for access to software packages
  rhn_register:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          params:
            $RHN_USERNAME: {get_param: rhn_username}
            $RHN_PASSWORD: {get_param: rhn_password}
            $POOL_ID: {get_param: rhn_pool} 
            $EXTRA_POOL_IDS: 
              list_join:
                - " --pool="
                - {get_param: extra_rhn_pools}
          template: {get_file: fragments/rhn-register.sh}

  # Enable any extra repositories
  set_extra_repos:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          params:
            $REPOLIST:
              list_join:
                - " "
                - {get_param: extra_repository_urls}
          template: {get_file: fragments/set-extra-repos.sh}

  set_extra_docker_repos:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          params:
            $REPOLIST:
              list_join:
                - " "
                - {get_param: extra_docker_repository_urls}
          template: {get_file: fragments/set-extra-docker-repos.sh}

  # Make sure the host software is current
  host_update:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        get_file: fragments/host-update.sh

  # Apply ansible performance tuning values
  tune_ansible:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config:
        get_file: fragments/tune-ansible.sh

  # Execute the tuning operation on a host
  deployment_tune_ansible:
    type: OS::Heat::SoftwareDeployment
    properties:
      actions: ['CREATE']
      config:
        get_resource: tune_ansible
      server:
        get_resource: host

  # Add a node's IP/Name mapping to DNS
  node_add:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
      - name: node_etc_host
      - name: node_hostname
      - name: node_type
      outputs:
      - name: result
      config:
        str_replace:
          params:
            $SKIP_DNS: {get_param: skip_dns}
          template: {get_file: fragments/infra-node-add.sh}

  # Remove a node's IP/Name mapping from DNS
  node_cleanup:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
      - name: node_name
      - name: ssh_user
        default: {get_param: ssh_user}
      outputs:
      - name: result
      config:
        str_replace:
          params:
            $SKIP_DNS: {get_param: skip_dns}
          template: {get_file: fragments/infra-node-cleanup.sh}

  # Additional space for Docker container and image storage
  docker_volume:
    type: OS::Cinder::Volume
    properties:
      size: {get_param: docker_volume_size}

  # Bind docker file space to the host filesystem
  docker_volume_attach:
    type: OS::Cinder::VolumeAttachment
    properties:
      instance_uuid: {get_resource: host}
      volume_id: {get_resource: docker_volume}

  # Wait until the cloud-init process ends and reports or times out
  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: {get_resource: wait_handle}
      timeout: {get_param: timeout}

  # This is passed to infra_init cloud-init script as a curl CLI command
  # When the cloud-init process ends it queries the URL with
  # a message which ends the wait and returns the value
  wait_handle:
    type: OS::Heat::WaitConditionHandle

outputs:
  instance_ip:
    description: Instance private IP (used by other nodes for DNS queries).
    value: {get_attr: [host, first_address]}
